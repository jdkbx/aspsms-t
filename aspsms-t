#!/usr/bin/perl 
# aspsms-t
# http://www.swissjabber.ch/
# https://github.com/micressor/aspsms-t
#
# Copyright (C) 2006-2012 Marco Balmer <marco@balmer.name>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

=head1 NAME

aspsms-t - sms transport for your xmpp/jabber server

=head1 SYNOPSIS

aspsms-t -c <configfile> -l <logfile>

=head1 DESCRIPTION

aspsms-t is an open source jabber2sms transport, which
allows you to send sms messages over the jabber network through the 
gateway-system of aspsms.com (https://www.aspsms.com). A lot of networks 
are supported.                                                                      
Normal TextSMS messages usually costs 1 aspsms Credit. aspsms-t deliver 
very fast and will send you a jabber status message. A second message will 
receive, if your sms was successfully delivered to the mobile device.

=over 2

=item * It supports simple text SMS with a maximum of 160 characters. If your 
message is >160 characters, aspsms-t will split it automatically in more 
than one part.

=item * Support for Arabic and other oriental characters up to 87 characters 
each sms.

=item * Delivery notification for each sms with a unique transaction number

=item * It can set alphanumeric originator of every sms. This can be a mobile 
phone or a short text with a maximum of 11 characters.

=back

=head1 JABBERD14 CONFIGURATION

Add the following lines to jabber.xml for jabberd14:

=over 4

<service id='sms-linker'>
 <host>sms.domain.ch</host>
 <accept>
   <ip>127.0.0.1</ip>
   <port>5245</port>
   <secret>secret</secret>
   <timeout>30</timeout>
 </accept>
 </service>

=back

Restart your jabberd.


=head1 EJABBERD CONFIGURATION

vi ejabberd.cfg:

=over 4

 %% ASPSMS Transport
 {5245, ejabberd_service, 
   [ {ip, {127, 0, 0, 1}},
     {access, all},
     {host, "aspsms.domain.tld", [{password, "secret"}]}
 ]},

=back

=head1 DNS CONFIGURATION

1. Add the SRV Record to the dns zone:

=over 4

  _xmpp-server._tcp.aspsms.domain.ch. 900 IN SRV 1 1 5269 domain.ch.

=back

2. Restart your nameserver.

=head1 ASPSMS-T CONFIGURATION

=over 2

=item * Copy ./etc/aspsms-t.xml.dist to /etc/aspsms-t.xml and configure it

=item * (optional) Configuring the delivery notification agent 

=back

=head1 ASPSMS-T DELIVERY NOTIFICATION

For each sms that you send with aspsms-t you may (optionally) get an
sms delivery notification.

If you like to configure delivery notification, please 
read aspsms-t.notify(1) manpage 

=head1 NETWORKS

List of supported networks:
 http://xml1.aspsms.com:5061/opinfo/networks.xml
List of networks with termination fees:
 http://xml1.aspsms.com:5061/opinfo/fees.xml

=head1 OPTIONS

Select configuration <aspsms-t.xml>

=head1 EXAMPLES

aspsms-t -c /etc/jabber/aspsms-t.xml

=head1 SEE ALSO

aspsms-t.notify(1)

=head1 FILES

/etc/jabber/aspsms-t.xml
The main aspsms-t configuration file

=head1 AUTHORS

Written by Marco Balmer
Adapted by jdkbx

=head1 RESOURCES

http://github.com/micressor/aspsms-t/
http://www.aspsms.com/documentation/

=head1 METHODS

=head2 main()

=cut

use strict;
#use lib "./lib"; # For development only

use ASPSMS::config;
use Getopt::Long;
use File::Pid;

use Net::Jabber qw(Component);

use XML::Parser;
use XML::Smart;

use ASPSMS::Iq;
use ASPSMS::Presence;
use ASPSMS::Jid;
use ASPSMS::Message;
use ASPSMS::Connection;
use ASPSMS::aspsmstlog;
use ASPSMS::ContactCredits;
use ASPSMS::CheckNotification;
use ASPSMS::InMessage;
				  
### BEGIN CONFIGURATION ###

=head2

=over 4

=item * set_config to read ./aspsms-t.xml and set all necessary vars.

=back

=cut

  my $log_file;
  my $config_file;

  GetOptions ("configfile=s" => \$config_file,
              "logfile:s"    => \$log_file)
   or die("Error in command line arguments\n");

  unless(defined $config_file)
   {
     print "Usage: ./aspsms-t -c aspsms-t.xml -l log.txt\n";
     exit(-1);
   }

  my $ret_config = set_config($config_file);
  unless($ret_config == 0)
   { 
    aspsmst_log("error","Error: stage config file $config_file");
    aspsmst_log("debug","Exit: $ret_config");
    aspsmst_log("debug","Usage: ./aspsms-t -c aspsms.xml -l log.txt");
    print "\n";
    exit($ret_config);
   } ### END of unless($ret_config == 0)


use Sys::Syslog;
openlog($ASPSMS::config::ident,'',"$ASPSMS::config::facility");
aspsmst_init_log($log_file);

=head2

=over 4

=item * Set pid file

=back

=cut

aspsmst_log("info","Starting up...");
my $pidfile = File::Pid->new({
    file => $ASPSMS::config::piddir."/aspsms-t.pid",
});

$pidfile->write;


=head2

=over 4

=item * Initialisation timer for message and notification statistic to syslog 
Every 300 seconds, it will generate a syslog entry with statistic infos

=back

=cut

my $timer					= 295;
$ASPSMS::config::transport_uptime			= 0;

$ASPSMS::config::aspsmst_stat_message_counter 		= 0;
$ASPSMS::config::aspsmst_stat_error_counter 		= 0;
$ASPSMS::config::aspsmst_stat_notification_counter 	= 0;

### END BASIC CONFIGURATION ###

aspsmst_log('info',"Init(): $ASPSMS::config::service_name - Version $ASPSMS::config::release`");

umask(0177);

$SIG{KILL} 	= sub { $ASPSMS::config::aspsmst_flag_shutdown="KILL"; 	};
$SIG{TERM} 	= sub { $ASPSMS::config::aspsmst_flag_shutdown="TERM"; 	};
$SIG{INT} 	= sub { $ASPSMS::config::aspsmst_flag_shutdown="INT"; 	};
$SIG{ABRT} 	= sub { $ASPSMS::config::aspsmst_flag_shutdown="ABRT"; 	};
#$SIG{SEGV} 	= sub { $ASPSMS::config::aspsmst_flag_shutdown="SEGV"; 	};
$SIG{ALRM} 	= sub { die "Unexepted Timeout" 		};

=head2

=over 4

=item * Check configuration of aspsms-t.notify and make a syslog entry if it 
is successfully.

=back

=cut

my $ret_check_notification = check_notification();
aspsmst_log('info',"Init(): check_notification(): Return: $ret_check_notification");

SetupConnection();
Connect();

sendAdminMessage("info","Init(): \$service_name=$ASPSMS::config::service_name \$release=$ASPSMS::config::release");

=head2

=over 4

=item * starting aspsms-t main loop

=back

=cut

while () 
 {

  $ASPSMS::config::transport_uptime++;$timer++;

=head2

=over 4

=item * Check every second for work (Process(1))

=item * Calculate messages/stanzas/uptime every 300 secs

=back

=cut

  ReConnect() unless defined($ASPSMS::config::Connection->Process(1));
  if($timer == 300)
   {
     #
     # Calculate messages per hour
     #
     $ASPSMS::config::aspsmst_stat_msg_per_hour  = $ASPSMS::config::aspsmst_stat_message_counter / ($ASPSMS::config::transport_uptime/3600);
     $ASPSMS::config::aspsmst_stat_msg_per_hour  = sprintf("%.3f",$ASPSMS::config::aspsmst_stat_msg_per_hour);
     #
     # Calculate messages per hour
     #
     $ASPSMS::config::aspsmst_stat_stanzas_per_hour  = $ASPSMS::config::aspsmst_stat_stanzas / ($ASPSMS::config::transport_uptime/3600);
     $ASPSMS::config::aspsmst_stat_stanzas_per_hour  = sprintf("%.3f",$ASPSMS::config::aspsmst_stat_stanzas_per_hour);
     #
     # Calculate uptime in hours
     #
        $ASPSMS::config::transport_uptime_hours	 = $ASPSMS::config::transport_uptime / 3600;
        $ASPSMS::config::transport_uptime_hours	 = sprintf("%.3f",$ASPSMS::config::transport_uptime_hours);


     
     #
     # Logging status message
     #
     aspsmst_log('info',"[stat] --- statistics ---");
     aspsmst_log('info',"[stat] $ASPSMS::config::transport_uptime_hours hour(s) transport uptime");
     aspsmst_log('info',"[stat] $ASPSMS::config::aspsmst_stat_message_counter SMS Successfully");
     aspsmst_log('info',"[stat] $ASPSMS::config::aspsmst_stat_notification_counter SMS Notifications");
     aspsmst_log('info',"[stat] $ASPSMS::config::aspsmst_stat_error_counter SMS delivery errors");
     aspsmst_log('info',"[stat] $ASPSMS::config::aspsmst_stat_msg_per_hour SMS Messages/h");
     aspsmst_log('info',"[stat] $ASPSMS::config::aspsmst_stat_stanzas XMPP/Jabber stanza counter");
     aspsmst_log('info',"[stat] $ASPSMS::config::aspsmst_stat_stanzas_per_hour XMPP/Jabber stanzas/h");
     aspsmst_log('notice',"[stat] \$aspsmst_flag_shutdown=$ASPSMS::config::aspsmst_flag_shutdown");
     aspsmst_log('notice',"[stat] \$aspsmst_in_progress=$ASPSMS::config::aspsmst_in_progress");
     aspsmst_log('info',"[stat] --- statistics ---");
    $timer = 0;
   } 

=head2

=over 4

=item * Entry point for shutdown if flag ($ASPSMS::config::aspsmst_flag_shutdown is 0.

=back

=cut

 unless($ASPSMS::config::aspsmst_flag_shutdown eq "0")
  {
   Stop($ASPSMS::config::aspsmst_flag_shutdown);
  }
   
 } ### END of Loop

Stop("The connection was killed...");

sub Stop {
my $err = shift;

=head2 Stop()

Terminate the SMS component's current run.

=cut

aspsmst_log('info',"Stop(): Shutting down aspsms-t \$aspsmst_in_progress=$ASPSMS::config::aspsmst_in_progress \$aspsmst_flag_shutdown=$ASPSMS::config::aspsmst_flag_shutdown");


unless($ASPSMS::config::aspsmst_in_progress==0)
 {
  aspsmst_log('info',"Stop(): Waiting for shutdown, aspsms-t is still working");
  return -1;
 }

sendAdminMessage("info","Stop(): \$aspsmst_in_progress=$ASPSMS::config::aspsmst_in_progress \$aspsmst_flag_shutdown=$ASPSMS::config::aspsmst_flag_shutdown \$err=$err");
aspsmst_log('info',"Stop(): Shutting down aspsms-t because sig: $err\n");
$ASPSMS::config::Connection->Disconnect();
exit(0);
}

sub SetupConnection {

=head2 SetupConnection()

Setup jabber component connection. This is used to connect as component
of the jabber server and not as a normal user.

=cut

$ASPSMS::config::Connection = new Net::Jabber::Component(debuglevel=>$ASPSMS::config::xmpp_debuglevel, debugfile=>"stdout");

my $status = $ASPSMS::config::Connection->Connect("hostname" => $ASPSMS::config::server, "port" => $ASPSMS::config::port, "secret" => $ASPSMS::config::secret, "componentname" => $ASPSMS::config::service_name);
$ASPSMS::config::Connection->AuthSend("secret" => $ASPSMS::config::secret);

if (!(defined($status))) {
  aspsmst_log("info","SetupConnection(): Error: Jabber server is down or connection was not allowed. $!\n");
}

=head2

If setup was successful we setting call backs 

=cut

$ASPSMS::config::Connection->SetCallBacks("message" => \&InMessage, "presence" => \&InPresence, "iq" => \&InIQ);

} # END of sub SetupConnection;


sub Connect {

=head2 Connect()

This function do all stuff to connect to the jabber server as a component.

=cut

my $status = $ASPSMS::config::Connection->Connected();
aspsmst_log('info',"Connect(): Transport connected to jabber-server $ASPSMS::config::server:$ASPSMS::config::port") if($status == 1);
aspsmst_log('info',"Connect(): aspsms-t running and ready for queries") if ($status == 1) ;


if ($status == 0)
	{

=head2

If we cannot connect to the jabber-server, we wait 5 seconds and try again

=cut

		aspsmst_log('info',"Connect(): Transport not connected, waiting 5 seconds...");
		sleep(5);
		Connect();
	}

} # END of sub Connect

sub ReConnect {

=head2 ReConnect()

This function wait 2 seconds and call again SetupConnection() and Connect() 
functions.

=cut

aspsmst_log('info',"ReConnect(): Connection to jabber lost, waiting 2 seconds...");
sleep(2);
aspsmst_log('info',"ReConnect(): Reconnecting...");
SetupConnection();
Connect();

}

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2006-2012 Marco Balmer <marco@balmer.name>

The Debian packaging is licensed under the 
GPL, see `/usr/share/common-licenses/GPL-2'.

=cut
